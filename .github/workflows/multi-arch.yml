#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Multi-Arch Images

env:
  OW_VERSION: 23.05.3
  PREFIX_URL: https://downloads.immortalwrt.org/releases/23.05.3/targets

on:
  workflow_dispatch:
    inputs:
      INPUT_TARGET:
        description: "Target to build (platform/target/subtarget)"
        required: false
        default: "all"
#   schedule:
#     - cron: 0 0 * * *

jobs:
  Config:
    name: Generate Config
    runs-on: ubuntu-latest
    outputs:
      TARGETS: ${{ steps.find-targets.outputs.TARGETS }}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Find Targets
        id: find-targets
        env:
          INPUT_TARGET: ${{ github.event.inputs.INPUT_TARGET }}
        run: |
          if [ "$INPUT_TARGET" = "all" ] || [ "$INPUT_TARGET" = "" ]; then
            export TARGETS="$(cat config/platform202409.config)"
          else
            export TARGETS="$INPUT_TARGET"
          fi
          JSON='{"config": ["default"], "targets":['
          FIRST=1
          for TARGET in $TARGETS; do
          [[ $FIRST -ne 1 ]] && JSON="$JSON"','
          JSON="$JSON"'"'"${TARGET}"'"'
          FIRST=0
          done
          JSON="$JSON"']}'
          echo $JSON
          echo "TARGETS=$JSON" >> $GITHUB_OUTPUT

  Docker-Images:
    name: ${{ matrix.TARGETS }}
    needs: [Config]
    environment: dev
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.Config.outputs.TARGETS)}}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential libncurses5-dev libncursesw5-dev \
            zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3 qemu-utils genisoimage

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login To DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login To Aliyun Docker
        uses: docker/login-action@v2
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_TOKEN }}

      - name: Generate Variables
        id: env
        run: |
          export DEVICE_PLATFORM=$(echo ${{ matrix.TARGETS }} | awk -F '/' '{print $1}')
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> $GITHUB_ENV
          export DEVICE_TARGET=$(echo ${{ matrix.TARGETS }} | awk -F '/' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          export DEVICE_SUBTARGET=$(echo ${{ matrix.TARGETS }} | awk -F '/' '{print $3}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          export DOCKER_IMAGE_ARCH=$(echo ${{ matrix.TARGETS }} | awk -F '/' '{print $4}' | sed 's/-/\//g')
          echo "DOCKER_IMAGE_ARCH=$DOCKER_IMAGE_ARCH" >> $GITHUB_ENV
          export DOCKER_EXTERA_TAG=$(echo ${{ matrix.TARGETS }} | awk -F '/' '{print $5}')
          echo "DOCKER_EXTERA_TAG=$DOCKER_EXTERA_TAG" >> $GITHUB_ENV

      - name: Download Image Builder
        run: |
          wget -q $PREFIX_URL/$DEVICE_TARGET/$DEVICE_SUBTARGET/immortalwrt-imagebuilder-$OW_VERSION-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64.tar.xz

      - name: Set Normal Image Builder
        run: |
          tar -xJf *.tar.xz
          cd immortalwrt-imagebuilder-$OW_VERSION-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64
          cp -rf $GITHUB_WORKSPACE/files .
          chmod +x files/etc/rc.local

      - name: Build Normal RootFS
        run: |
          cd immortalwrt-imagebuilder-$OW_VERSION-$DEVICE_TARGET-$DEVICE_SUBTARGET.Linux-x86_64
          chmod +x $GITHUB_WORKSPACE/scripts/*
          $GITHUB_WORKSPACE/scripts/preset-terminal-tools.sh
          export CONFIG_NORMAL_PACKAGES=$(cat $GITHUB_WORKSPACE/config/packages202409.config | tr -s "\n" " ")
          make image PACKAGES="$CONFIG_NORMAL_PACKAGES" FILES="files"
          cp -rf bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET/*rootfs.tar.gz $GITHUB_WORKSPACE
          cd $GITHUB_WORKSPACE
          rm -rf immortalwrt-imagebuilder*

      - name: Build & Push Normal Image (Default)
        if: env.DOCKER_EXTERA_TAG == null
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ env.DOCKER_IMAGE_ARCH }}
          file: Dockerfile
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/openwrt:${{ env.DEVICE_PLATFORM }}
            registry.cn-hangzhou.aliyuncs.com/${{ secrets.ALIYUN_NAMESPACES }}/openwrt:${{ env.DEVICE_PLATFORM }}

      - name: Build & Push Normal Image (Extra Tag)
        if: env.DOCKER_EXTERA_TAG != null
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ env.DOCKER_IMAGE_ARCH }}
          file: Dockerfile
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/openwrt:${{ env.DEVICE_PLATFORM }}
            ${{ secrets.DOCKERHUB_USERNAME }}/openwrt:${{ env.DOCKER_EXTERA_TAG }}
            registry.cn-hangzhou.aliyuncs.com/${{ secrets.ALIYUN_NAMESPACES }}/openwrt:${{ env.DEVICE_PLATFORM }}
            registry.cn-hangzhou.aliyuncs.com/${{ secrets.ALIYUN_NAMESPACES }}/openwrt:${{ env.DOCKER_EXTERA_TAG }}
